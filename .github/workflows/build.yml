name: sigrok Artifacts Build

on:
  push:
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  # The path where the compiled packages will be installed.
  INSTALL_DIR: "${{ github.workspace }}/sr"
  # Git URL for the libserialport dependency
  LIBSERIALPORT_REPO: "git://sigrok.org/libserialport"
  # Git URL for the libsigrok dependency
  LIBSIGROK_REPO: "git://sigrok.org/libsigrok"
  # Git branch for the libsigrok dependency
  LIBSIGROK_BRANCH: "master"
  # Git URL for the libsigrokdecode dependency
  LIBSIGROKDECODE_REPO: "git://sigrok.org/libsigrokdecode"
  # Git URL for the sigrok-firmware dependency
  SIGROK_FIRMWARE_REPO: "git://sigrok.org/sigrok-firmware"
  # Git URL for the sigrok-firmware-fx2lafw dependency
  SIGROK_FIRMWARE_FX2LAFW_REPO: "git://sigrok.org/sigrok-firmware-fx2lafw"
  # Git URL for the sigrok-dumps dependency
  SIGROK_DUMPS_REPO: "git://sigrok.org/sigrok-dumps"
  # Build type for PulseView (Debug, Release, RelWithDebInfo, MinSizeRel)
  BUILD_TYPE: "Release"
  # Misc commands
  WGET: "wget -c --quiet"
  GIT_CLONE: "git clone --depth=1"

jobs:

  # build_pulseview_mxe:
  #   name: PulseView MXE build (${{ matrix.target.target }})
  #
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ghcr.io/knarfs/sigrok-mxe:latest
  #
  #   strategy:
  #     matrix:
  #       target:
  #         - { target: "i686", nsis_param: "" }
  #         - { target: "x86_64", nsis_param: "-DPE64=1" }
  #
  #   env:
  #     TARGET: ${{ matrix.target.target }}
  #     DEBUG: 0
  #     # When downloading python from sigrok.org, smth is wrong with the cert
  #     WGET: "wget -c --quiet --no-check-certificate"
  #
  #   steps:
  #     - name: Checkout sigrok-build
  #       uses: actions/checkout@v3
  #       with:
  #         path: sigrok-build
  #
  #     - name: Build dependencies
  #       run: |
  #         cd sigrok-build/ci/mxe
  #         source sigrok-mxe-init-toolchain.sh
  #         ./sigrok-mxe-build-dependencies.sh
  #
  #     - name: Checkout PulseView
  #       uses: actions/checkout@v3
  #       with:
  #         # TODO: Clone from sigrok.org
  #         repository: sigrokproject/pulseview
  #         path: pulseview
  #
  #     - name: Build PulseView
  #       run: |
  #         source sigrok-build/ci/mxe/sigrok-mxe-init-toolchain.sh
  #         mkdir -p pulseview/build
  #         cd pulseview/build
  #         $CMAKE \
  #           -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_DIR \
  #           -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
  #           -DDISABLE_WERROR=FALSE \
  #           -DENABLE_TESTS=FALSE \
  #           ..
  #         make $PARALLEL $V
  #         make install/strip $V
  #
  #     - name: Build NSIS installer
  #       run: |
  #         source sigrok-build/ci/mxe/sigrok-mxe-init-toolchain.sh
  #
  #         # Zadig (we ship this with frontends for easy driver switching).
  #         $WGET https://github.com/pbatard/libwdi/releases/download/b721/zadig-2.4.exe -O $INSTALL_DIR/zadig.exe
  #         $WGET https://github.com/pbatard/libwdi/releases/download/v1.2.5/zadig_xp-2.2.exe -O $INSTALL_DIR/zadig_xp.exe
  #
  #         cp sigrok-build/ci/mxe/contrib-mxe/FileAssociation.nsh pulseview/build/contrib
  #         makensis ${{ matrix.target.nsis_param }} pulseview/build/contrib/pulseview_cross.nsi
  #
  #     - name: Rename artifact
  #       run: |
  #         cd pulseview/build/contrib
  #         mv pulseview-*installer.exe pulseview-NIGHTLY-${{ matrix.target.target }}-static-$BUILD_TYPE-installer.exe
  #
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: artifacts
  #         path: pulseview/build/contrib/pulseview*installer.exe


  # build_sigrok-cli_mxe:
  #   name: sigrok-cli MXE build (${{ matrix.target.target }})
  #
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ghcr.io/knarfs/sigrok-mxe:latest
  #
  #   strategy:
  #     matrix:
  #       target:
  #         - { target: "i686", nsis_param: "" }
  #         - { target: "x86_64", nsis_param: "-DPE64=1" }
  #
  #   env:
  #     TARGET: ${{ matrix.target.target }}
  #     DEBUG: 0
  #     # When downloading python from sigrok.org, smth is wrong with the cert
  #     WGET: "wget -c --quiet --no-check-certificate"
  #
  #   steps:
  #     - name: Checkout sigrok-build
  #       uses: actions/checkout@v3
  #       with:
  #         path: sigrok-build
  #
  #     - name: Build dependencies
  #       run: |
  #         cd sigrok-build/ci/mxe
  #         source sigrok-mxe-init-toolchain.sh
  #         ./sigrok-mxe-build-dependencies.sh
  #
  #     - name: Checkout sigrok-cli
  #       uses: actions/checkout@v3
  #       with:
  #         repository: sigrokproject/sigrok-cli
  #         path: sigrok-cli
  #
  #     - name: Build sigrok-cli
  #       run: |
  #         source sigrok-build/ci/mxe/sigrok-mxe-init-toolchain.sh
  #         cd sigrok-cli
  #         ./autogen.sh
  #         ./configure $C
  #         make $PARALLEL $V
  #         make install $V
  #
  #     - name: Build NSIS installer
  #       run: |
  #         source sigrok-build/ci/mxe/sigrok-mxe-init-toolchain.sh
  #
  #         # Zadig (we ship this with frontends for easy driver switching).
  #         $WGET https://github.com/pbatard/libwdi/releases/download/b721/zadig-2.4.exe -O $INSTALL_DIR/zadig.exe
  #         $WGET https://github.com/pbatard/libwdi/releases/download/v1.2.5/zadig_xp-2.2.exe -O $INSTALL_DIR/zadig_xp.exe
  #
  #         cp sigrok-build/ci/mxe/contrib-mxe/FileAssociation.nsh sigrok-cli/contrib
  #         makensis ${{ matrix.target.nsis_param }} sigrok-cli/contrib/sigrok-cli_cross.nsi
  #
  #     - name: Rename artifact
  #       run: |
  #         cd sigrok-cli/contrib
  #         mv sigrok-cli-*installer.exe sigrok-cli-NIGHTLY-${{ matrix.target.target }}-static-$BUILD_TYPE-installer.exe
  #
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: artifacts
  #         path: sigrok-cli/contrib/sigrok-cli*installer.exe


  # build_pulseview_appimage:
  #   name: PulseView AppImage build (${{ matrix.target.target }})
  #
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ghcr.io/knarfs/sigrok-appimage-${{ matrix.target.container }}:latest
  #
  #   strategy:
  #     matrix:
  #       target:
  #         # - target: "i386"
  #         #   container: "x86_64-i386"
  #         #   cc: "gcc -m32"
  #         #   cxx: "g++ -m32"
  #         #   ld: "ld -melf_i386"
  #         #   ldflags: "-m32"
  #         - target: "x86_64"
  #           container: "x86_64"
  #           cc: "gcc"
  #           cxx: "g++"
  #           ld: "ld"
  #           ldflags: ""
  #
  #   env:
  #     TARGET: ${{ matrix.target.target }}
  #     CC: ${{ matrix.target.cc }}
  #     CXX: ${{ matrix.target.cxx }}
  #     LD: ${{ matrix.target.ld }}
  #     LDFLAGS: ${{ matrix.target.ldflags }}
  #     APP_DIR: "${{ github.workspace }}/AppDir"
  #     # Artifact infos
  #     ARTIFACT_TITLE: "PulseView"
  #     ARTIFACT_BIN_NAME: "pulseview"
  #     ARTIFACT_VERSION: "NIGHTLY"
  #
  #   steps:
  #     - name: Update dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get upgrade -y
  #         # Temp!
  #         sudo apt-get install -y python3.6-dev
  #         # Temp!
  #         sudo apt-get install -y libboost-system1.65-dev libboost-filesystem1.65-dev libboost-serialization1.65-dev
  #
  #     - name: Checkout sigrok-build
  #       uses: actions/checkout@v3
  #       with:
  #         path: sigrok-build
  #
  #     - name: Build dependencies
  #       run: |
  #         cd sigrok-build/ci/appimage
  #         source sigrok-appimage-init-toolchain.sh
  #         ./sigrok-appimage-build-dependencies.sh
  #
  #     - name: Checkout PulseView
  #       uses: actions/checkout@v3
  #       with:
  #         repository: sigrokproject/pulseview
  #         path: pulseview
  #
  #     - name: Build PulseView
  #       run: |
  #         source sigrok-build/ci/appimage/sigrok-appimage-init-toolchain.sh
  #         mkdir -p "$APP_DIR"
  #         mkdir -p pulseview/build
  #         cd pulseview/build
  #         PKG_CONFIG_PATH=$P cmake \
  #           -DCMAKE_INSTALL_PREFIX:PATH="$APP_DIR"/usr \
  #           -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
  #           -DDISABLE_WERROR=FALSE \
  #           -DENABLE_TESTS=FALSE \
  #           ..
  #         make $PARALLEL $V
  #         make install/strip $V
  #
  #     - name: Build AppImage
  #       run: |
  #         cd sigrok-build/ci/appimage
  #         source sigrok-appimage-init-toolchain.sh
  #         ./sigrok-appimage-create-appimage.sh
  #
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: artifacts
  #         path: sigrok-build/ci/appimage/appimage-build/PulseView-*.AppImage


  build_sigrok-cli_appimage:
    name: sigrok-cli AppImage build (${{ matrix.target.target }})

    runs-on: ubuntu-latest
    container:
      image: ghcr.io/knarfs/sigrok-appimage-${{ matrix.target.container }}:latest

    strategy:
      matrix:
        target:
          # - target: "i386"
          #   container: "x86_64-i386"
          #   cc: "gcc -m32"
          #   cxx: "g++ -m32"
          #   ld: "ld -melf_i386"
          #   ldflags: "-m32"
          - target: "x86_64"
            container: "x86_64"
            cc: "gcc"
            cxx: "g++"
            ld: "ld"
            ldflags: ""

    env:
      TARGET: ${{ matrix.target.target }}
      CC: ${{ matrix.target.cc }}
      CXX: ${{ matrix.target.cxx }}
      LD: ${{ matrix.target.ld }}
      LDFLAGS: ${{ matrix.target.ldflags }}
      APP_DIR: "${{ github.workspace }}/AppDir"
      # Artifact infos
      ARTIFACT_TITLE: "sigrok-cli"
      ARTIFACT_BIN_NAME: "sigrok-cli"
      ARTIFACT_VERSION: "NIGHTLY"

    steps:
      - name: Update dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y
          # Temp!
          #sudo apt-get install -y libffi-dev

      - name: Checkout sigrok-build
        uses: actions/checkout@v3
        with:
          path: sigrok-build

      - name: Insall conda
        run: |
          cd sigrok-build/ci/appimage
          source sigrok-appimage-init-toolchain.sh
          ./sigrok-appimage-install-conda.sh

      - name: Build dependencies
        run: |
          cd sigrok-build/ci/appimage
          source sigrok-appimage-init-toolchain.sh
          ./sigrok-appimage-build-dependencies.sh

      - name: Checkout sigrok-cli
        uses: actions/checkout@v3
        with:
          repository: sigrokproject/sigrok-cli
          path: sigrok-cli

      - name: Build sigrok-cli
        run: |
          source sigrok-build/ci/appimage/sigrok-appimage-init-toolchain.sh
          source "$APP_DIR"/usr/conda/bin/activate
          #mkdir -p "$APP_DIR"
          cd sigrok-cli
          ./autogen.sh
          PKG_CONFIG_PATH=$P ./configure --prefix="$APP_DIR"/usr LDFLAGS="-Wl,-rpath=$APP_DIR/usr/conda/lib" # -L$APP_DIR/usr/conda/lib"
          make $PARALLEL $V
          make install $V

      - name: Build AppImage
        run: |
          cd sigrok-build/ci/appimage
          source sigrok-appimage-init-toolchain.sh
          ./sigrok-appimage-cleanup-conda.sh
          ./sigrok-appimage-create-appimage.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: sigrok-build/ci/appimage/appimage-build/sigrok-cli-*.AppImage


  # build_pulseview_macos:
  #   name: PulseView macOS build
  #
  #   runs-on: macos-11
  #
  #   env:
  #     TARGET: "x86"
  #     # We use Homebrew Qt 5.15.x (current)
  #     BREW_QT_VERSION: "qt@5"
  #     # We use Homebrew Python 3.x (current)
  #     BREW_PYTHON_VERSION: "python@3"
  #     # Artifact infos
  #     ARTIFACT_TITLE: "PulseView"
  #     ARTIFACT_BIN_NAME: "pulseview"
  #     ARTIFACT_VERSION: "NIGHTLY"
  #
  #   steps:
  #     - name: Install dependencies
  #       run: |
  #         brew install autoconf automake autoconf-archive pkg-config sdcc \
  #           libtool libzip libusb libftdi hidapi nettle check doxygen swig \
  #           glib glibmm@2.66 cmake boost "$BREW_PYTHON_VERSION" "$BREW_QT_VERSION"
  #
  #     - name: Checkout sigrok-build
  #       uses: actions/checkout@v3
  #       with:
  #         path: sigrok-build
  #
  #     - name: Build dependencies
  #       run: |
  #         cd sigrok-build/ci/macos
  #         source sigrok-macos-init-toolchain.sh
  #         ./sigrok-macos-build-dependencies.sh
  #
  #     - name: Checkout PulseView
  #       uses: actions/checkout@v3
  #       with:
  #         # TODO: Clone from sigrok.org
  #         repository: knarfS/pulseview
  #         path: pulseview
  #
  #     - name: Build PulseView
  #       run: |
  #         source sigrok-build/ci/macos/sigrok-macos-init-toolchain.sh
  #         mkdir -p pulseview/build
  #         cd pulseview/build
  #         PKG_CONFIG_PATH=$P cmake \
  #           -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_DIR \
  #           -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
  #           -DDISABLE_WERROR=FALSE \
  #           -DENABLE_TESTS=FALSE \
  #           ..
  #         make $PARALLEL $V
  #         make install $V
  #
  #     - name: Build DMG
  #       run: |
  #         cd sigrok-build/ci/macos
  #         source sigrok-macos-init-toolchain.sh
  #         ./sigrok-macos-create-dmg.sh
  #
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: artifacts
  #         path: sigrok-build/ci/macos/PulseView*.dmg


  # build_sigrok-cli_macos:
  #   name: sigrok-cli macOS build
  #
  #   runs-on: macos-11
  #
  #   env:
  #     TARGET: "x86"
  #     # We use Homebrew Qt 5.15.x (current)
  #     BREW_QT_VERSION: "qt@5"
  #     # We use Homebrew Python 3.x (current)
  #     BREW_PYTHON_VERSION: "python@3"
  #     # Artifact infos
  #     ARTIFACT_TITLE: "sigrok-cli"
  #     ARTIFACT_BIN_NAME: "sigrok-cli"
  #     ARTIFACT_VERSION: "NIGHTLY"
  #
  #   steps:
  #     - name: Install dependencies
  #       run: |
  #         brew install autoconf automake autoconf-archive pkg-config sdcc \
  #           libtool libzip libusb libftdi hidapi nettle check doxygen swig \
  #           glib "$BREW_PYTHON_VERSION" "$BREW_QT_VERSION"
  #
  #     - name: Checkout sigrok-build
  #       uses: actions/checkout@v3
  #       with:
  #         path: sigrok-build
  #
  #     - name: Build dependencies
  #       run: |
  #         cd sigrok-build/ci/macos
  #         source sigrok-macos-init-toolchain.sh
  #         ./sigrok-macos-build-dependencies.sh
  #
  #     - name: Checkout sigrok-cli
  #       uses: actions/checkout@v3
  #       with:
  #         # TODO: Clone from sigrok.org
  #         repository: sigrokproject/sigrok-cli
  #         path: sigrok-cli
  #
  #     - name: Build sigrok-cli
  #       run: |
  #         source sigrok-build/ci/macos/sigrok-macos-init-toolchain.sh
  #         cd sigrok-cli
  #         ./autogen.sh
  #         PKG_CONFIG_PATH=$P ./configure $C
  #         make $PARALLEL $V
  #         make install $V
  #
  #     - name: Build DMG
  #       run: |
  #         cd sigrok-build/ci/macos
  #         source sigrok-macos-init-toolchain.sh
  #         ./sigrok-macos-create-dmg.sh
  #
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: artifacts
  #         path: sigrok-build/ci/macos/sigrok-cli*.dmg


  publish:
    name: sigrok artifacts publish

    runs-on: ubuntu-latest

    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
      (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master')
    needs:
      # - build_pulseview_mxe
      # - build_sigrok-cli_mxe
      # - build_pulseview_appimage
      - build_sigrok-cli_appimage
      # - build_pulseview_macos
      # - build_sigrok-cli_macos

    steps:
      - name: Install dependencies
        run: |
          # AppImage needs libfuse2 to start
          sudo apt-get update
          sudo apt-get install -y libfuse2
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Inspect directory after downloading artifacts
        run: ls -alFR
      - name: Upload artifacts and create (continuous) release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
            chmod +x pyuploadtool-x86_64.AppImage
            ./pyuploadtool-x86_64.AppImage artifacts/*.*

